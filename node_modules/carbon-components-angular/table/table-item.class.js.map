{"version":3,"file":"table-item.class.js","sourceRoot":"","sources":["../src/table/table-item.class.ts"],"names":[],"mappings":"AAIA;IAkEC;;;;OAIG;IACH,mBAAY,OAAa;QACxB,yCAAyC;QACzC,IAAM,QAAQ,GAAG;YAChB,IAAI,EAAE,EAAE;SACR,CAAC;QACF,gEAAgE;QAChE,IAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;IAC/C,CAAC;IACF,gBAAC;AAAD,CAAC,AAnFD,IAmFC","sourcesContent":["import {\n\tTemplateRef\n} from \"@angular/core\";\n\nexport class TableItem {\n\t/**\n\t * Data for the table item.\n\t *\n\t * @type {*}\n\t * @memberof TableItem\n\t */\n\tdata: any;\n\n\t/**\n\t * Data for the expanded part of the row.\n\t *\n\t * You only need to set it for the first item in the row.\n\t *\n\t * @type {*}\n\t * @memberof TableItem\n\t */\n\texpandedData: any;\n\n\t/**\n\t * Used to display data in a desired way.\n\t *\n\t * If not provided, displays data as a simple string.\n\t *\n\t * Usage:\n\t *\n\t * In a component where you're using the table create a template like:\n\t *\n\t * ```html\n\t * <ng-template #customItemTemplate let-data=\"data\">\n\t * \t<i><a [routerLink]=\"data.link\">{{data.name}}</a></i>\n\t * </ng-template>\n\t * ```\n\t * where we assume your data contains `link` and `name`. `let-data=\"data\"` is\n\t * necessary for you to be able to access item's data in the template.\n\t *\n\t * Create `ViewChild` property with:\n\t *\n\t * ```typescript\n\t * (at)ViewChild(\"customItemTemplate\")\n\t * protected customItemTemplate: TemplateRef<any>;\n\t * ```\n\t *\n\t * Set the template to the table item, for example:\n\t *\n\t * ```typescript\n\t * this.model.data = [\n\t * \t[new TableItem({data: {name: \"Custom item\", link: \"/table\"}, template: this.customItemTemplate})]\n\t * ];\n\t * ```\n\t *\n\t * @type {TemplateRef<any>}\n\t * @memberof TableItem\n\t */\n\ttemplate: TemplateRef<any>;\n\n\t/**\n\t * Template for rendering `expandedData`\n\t *\n\t * You only need to set it for the first item in the row.\n\t *\n\t * @type {TemplateRef<any>}\n\t * @memberof TableItem\n\t */\n\texpandedTemplate: TemplateRef<any>;\n\n\t/**\n\t * Creates an instance of TableItem.\n\t * @param {*} [rawData]\n\t * @memberof TableItem\n\t */\n\tconstructor(rawData?: any) {\n\t\t// defaults so we dont leave things empty\n\t\tconst defaults = {\n\t\t\tdata: \"\"\n\t\t};\n\t\t// fill our object with provided props, and fallback to defaults\n\t\tconst data = Object.assign({}, defaults, rawData);\n\t\tthis.data = data.data;\n\t\tthis.expandedData = data.expandedData;\n\t\tthis.template = data.template;\n\t\tthis.expandedTemplate = data.expandedTemplate;\n\t}\n}\n"]}