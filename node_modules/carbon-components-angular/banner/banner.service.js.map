{"version":3,"file":"banner.service.js","sourceRoot":"","sources":["../src/banner/banner.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tApplicationRef,\n\tComponentFactory,\n\tComponentFactoryResolver,\n\tComponentRef,\n\tEventEmitter,\n\tInjectable,\n\tInjector,\n\tOnDestroy\n} from \"@angular/core\";\n\nimport { BannerContent, NotificationContent, ToastContent } from \"./banner-content.interface\";\nimport { Banner } from \"./banner.module\";\nimport { Toast } from \"./toast.component\";\n\n/**\n * Deprecated in favour of `NotificationService` (to be removed in v3.0).\n * Provides a way to use the banner component.\n *\n * Banners are displayed toward the top of the UI and do not interrupt the userâ€™s work.\n *\n * @export\n * @class BannerService\n * @deprecated\n */\n@Injectable()\nexport class BannerService implements OnDestroy {\n\t/**\n\t * An array containing `ComponentRef`s to all the banners this service instance\n\t * is responsible for.\n\t *\n\t * @memberof BannerService\n\t */\n\tpublic bannerRefs = new Array<ComponentRef<any>>();\n\tpublic onClose: EventEmitter<any> = new EventEmitter();\n\n\t/**\n\t * Constructs BannerService.\n\t *\n\t * @param {Injector} injector\n\t * @param {ComponentFactoryResolver} componentFactoryResolver\n\t * @param {ApplicationRef} applicationRef\n\t * @memberof BannerService\n\t */\n\tconstructor(\n\t\tprotected injector: Injector,\n\t\tprotected componentFactoryResolver: ComponentFactoryResolver,\n\t\tprotected applicationRef: ApplicationRef) {\n\t\tconsole.warn(\"`BannerService` has been deprecated in favour of `NotificationService`\");\n\t}\n\n\t/**\n\t * Shows the banner based on the `bannerObj`.\n\t *\n\t * @param {any} bannerObj Can have `type`, `message`, `target`, `duration` and `smart` members.\n\t *\n\t * **Members:**\n\t *\n\t * * `type` can be one of `\"info\"`, `\"warning\"`, `\"danger\"`, `\"success\"`\n\t * * `message` is message for banner to display\n\t * * `target` is css selector defining an element to append banner to. If not provided,\n\t * `showBanner()` creates a place for the banner in `body`\n\t * * `duration` is number of ms to close the banner after. If used in combination with `smart`,\n\t * it's added to the calculated timeout\n\t * * `smart`, set to `true` if you want to use smart banner.\n\t *\n\t * **Example:**\n\t * ```typescript\n\t * // Info banner, saying \"Sample message.\" added to the element with id banner-container\n\t * // uses smart timeout with added duration of 1 second.\n\t * {\n\t *\ttype: \"info\",\n\t *\tmessage: \"Sample message.\",\n\t *\ttarget: \"#banner-container\",\n\t *\tduration: 1000,\n\t *\tsmart: true\n\t * }\n\t * ```\n\t *\n\t * @param {any} [bannerComp=Banner] If provided, used to resolve component factory\n\t * @memberof BannerService\n\t */\n\tshowBanner(bannerObj: BannerContent | NotificationContent | ToastContent, bannerComp = Banner) {\n\t\tconst componentFactory = this.componentFactoryResolver.resolveComponentFactory(bannerComp);\n\n\t\tlet bannerRef = componentFactory.create(this.injector);\n\t\tbannerRef.instance.bannerObj = bannerObj as any; // typescript isn't being very smart here, so we type to any\n\t\tthis.bannerRefs.push(bannerRef);\n\n\t\tthis.onClose = bannerRef.instance.close;\n\t\tthis.applicationRef.attachView(bannerRef.hostView);\n\n\t\tif (bannerObj.target) {\n\t\t\tdocument.querySelector(bannerObj.target).appendChild(bannerRef.location.nativeElement);\n\t\t} else {\n\t\t\tlet body = document.querySelector(\"body\");\n\n\t\t\t// get or create a container for alert list\n\t\t\tlet bannerClassName = \"banner-overlay\";\n\t\t\tlet bannerList = body.querySelector(`.${bannerClassName}`);\n\t\t\tif (!bannerList) {\n\t\t\t\tbannerList = document.createElement(\"div\");\n\t\t\t\tbannerList.className = bannerClassName;\n\t\t\t\tbody.appendChild(bannerList);\n\t\t\t}\n\n\t\t\t// add the banner to the top of the list\n\t\t\tif (bannerList.firstChild) {\n\t\t\t\tbannerList.insertBefore(bannerRef.location.nativeElement, bannerList.firstChild);\n\t\t\t} else {\n\t\t\t\tbannerList.appendChild(bannerRef.location.nativeElement);\n\t\t\t}\n\t\t}\n\n\t\tif (bannerObj.duration && bannerObj.duration > 0) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.close(bannerRef);\n\t\t\t}, bannerObj.duration);\n\t\t}\n\n\t\tif (bannerObj.smart) {\n\t\t\t// let it disappear after calculated timeout\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.close(bannerRef);\n\t\t\t}, this.getSmartTimeout(bannerObj));\n\t\t}\n\n\t\tthis.onClose.subscribe(() => {\n\t\t\tthis.close(bannerRef);\n\t\t});\n\n\t\tbannerRef.instance.componentRef = bannerRef;\n\t\treturn bannerRef.instance;\n\t}\n\n\tshowToast(bannerObj: BannerContent | NotificationContent | ToastContent, bannerComp = Toast) {\n\t\treturn this.showBanner(bannerObj, bannerComp);\n\t}\n\n\t/**\n\t * Programatically closes banner based on `bannerRef`.\n\t *\n\t * @param bannerRef `ComponentRef` of a banner or `Banner` component you wish to close\n\t * @memberof BannerService\n\t */\n\tclose(bannerRef: any) {\n\t\tif (bannerRef) {\n\t\t\tif (bannerRef instanceof Banner) {\n\t\t\t\tthis.close(bannerRef.componentRef);\n\t\t\t} else {\n\t\t\t\tsetTimeout( () => {\n\t\t\t\t\tthis.applicationRef.detachView(bannerRef.hostView);\n\t\t\t\t\tbannerRef.destroy();\n\t\t\t\t}, 200);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the amount of time user needs to read the message in the banner.\n\t *\n\t * @param {any} bannerObj Same object used to instantiate banner.\n\t *\n\t * In addition to `type` and `message` members, use `duration` member to add\n\t * some extra time (in ms) to timeout if you need to.\n\t * @returns {number} calculated timeout (in ms) for smart banner\n\t * @memberof BannerService\n\t */\n\tgetSmartTimeout(bannerObj): number {\n\t\t// calculate timeout\n\t\tlet timeout = 600; // start with reaction time\n\n\t\t// custom duration\n\t\ttimeout += bannerObj.duration || 0;\n\n\t\t// message type\n\t\tswitch (bannerObj.type) {\n\t\t\tcase \"info\":\n\t\t\tcase \"success\":\n\t\t\tdefault: {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"danger\": {\n\t\t\t\ttimeout += 3000;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"warning\": {\n\t\t\t\ttimeout += 1500;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// message length\n\t\t// average reader reads around 200 words per minute, or it takes them ~0.3s per word\n\t\t// let's use 1.5 factor for below average speed readers and have 0.45s per word\n\t\tlet wordCount = bannerObj.message.trim().split(/\\s+/).length;\n\t\ttimeout += wordCount * 450;\n\n\t\treturn timeout;\n\t}\n\n\t/**\n\t * OnDestroy hook.\n\t *\n\t * Destroys all living banners it is responsible for.\n\t *\n\t * @memberof BannerService\n\t */\n\tngOnDestroy() {\n\t\tif (this.bannerRefs.length > 0) {\n\t\t\tfor (let i = 0; i < this.bannerRefs.length; i++) {\n\t\t\t\tlet bannerRef = this.bannerRefs[i];\n\t\t\t\tthis.applicationRef.detachView(bannerRef.hostView);\n\t\t\t\tbannerRef.destroy();\n\t\t\t}\n\t\t\tthis.bannerRefs.length = 0;\n\t\t}\n\t}\n}\n"]}