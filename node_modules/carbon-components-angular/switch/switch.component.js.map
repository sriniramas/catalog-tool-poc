{"version":3,"file":"switch.component.js","sourceRoot":"","sources":["../src/switch/switch.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,gCAAgC,CAAC;AAC1D,OAAO,EACN,iBAAiB,EACjB,SAAS,EACT,KAAK,EACL,MAAM,EACN,YAAY,EACZ,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAGnD;;;;GAIG;AACH,MAAM,CAAN,IAAY,WAKX;AALD,WAAY,WAAW;IACtB,6CAAI,CAAA;IACJ,+DAAa,CAAA;IACb,mDAAO,CAAA;IACP,uDAAS,CAAA;AACV,CAAC,EALW,WAAW,KAAX,WAAW,QAKtB;AAED;;;;GAIG;AACH;IAAA;IAaA,CAAC;IAAD,mBAAC;AAAD,CAAC,AAbD,IAaC;;AAED;;;;;;GAMG;AACH;IAuC4B,0BAAQ;IAsBnC;;OAEG;IACH,gBAAsB,iBAAoC;QAA1D,YACC,kBAAM,iBAAiB,CAAC,SAIxB;QALqB,uBAAiB,GAAjB,iBAAiB,CAAmB;QAnB1D;;WAEG;QACM,UAAI,GAAgB,IAAI,CAAC;QAElC;;WAEG;QACH,QAAE,GAAG,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC;QAEpC;;;WAGG;QACO,YAAM,GAAG,IAAI,YAAY,EAAgB,CAAC;QAOnD,MAAM,CAAC,WAAW,EAAE,CAAC;QAErB,OAAO,CAAC,IAAI,CAAC,4DAA4D,CAAC,CAAC;;IAC5E,CAAC;IAED;;;OAGG;IACH,gCAAe,GAAf;QACC,IAAI,KAAK,GAAG,IAAI,YAAY,EAAE,CAAC;QAC/B,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAE7B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IA1CD;;OAEG;IACI,kBAAW,GAAG,CAAC,CAAC;;gBA3CvB,SAAS,SAAC;oBACV,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,w+BA4BT;oBACD,SAAS,EAAE;wBACV;4BACC,OAAO,EAAE,iBAAiB;4BAC1B,WAAW,EAAE,MAAM;4BACnB,KAAK,EAAE,IAAI;yBACX;qBACD;iBACD;;;;gBAtFA,iBAAiB;;;uBAgGhB,KAAK;yBAWL,MAAM;;IAwBR,aAAC;CAAA,AAnFD,CAuC4B,QAAQ,GA4CnC;SA5CY,MAAM","sourcesContent":["import { Checkbox } from \"../checkbox/checkbox.component\";\nimport {\n\tChangeDetectorRef,\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter\n} from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n\n/**\n * Deprecated in favour of `ToggleState` (to be removed in v3.0).\n * Defines the set of states for a switch component.\n * @deprecated\n */\nexport enum SwitchState {\n\tInit,\n\tIndeterminate,\n\tChecked,\n\tUnchecked\n}\n\n/**\n * Deprecated in favour of `ToggleChange` (to be removed in v3.0).\n * Used to emit changes performed on switch components.\n * @deprecated\n */\nexport class SwitchChange {\n\t/**\n\t * Contains the `Switch` that has been changed.\n\t * @type {Switch}\n\t * @memberof SwitchChange\n\t */\n\tsource: Switch;\n\t/**\n\t * The state of the `Switch` encompassed in the `SwitchChange` class.\n\t * @type {boolean}\n\t * @memberof SwitchChange\n\t */\n\tchecked: boolean;\n}\n\n/**\n * Deprecated in favour of `Toggle` (to be removed in v3.0).\n * ```html\n * <ibm-switch [(ngModel)]=\"switchState\">Switch</ibm-switch>\n * ```\n * @deprecated\n */\n@Component({\n\tselector: \"ibm-switch\",\n\ttemplate: `\n\t\t<input\n\t\t\tclass=\"bx--toggle\"\n\t\t\ttype=\"checkbox\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--toggle--small': size === 'sm'\n\t\t\t}\"\n\t\t\t[id]=\"id\"\n\t\t\t[value]=\"value\"\n\t\t\t[name]=\"name\"\n\t\t\t[required]=\"required\"\n\t\t\t[checked]=\"checked\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[attr.aria-checked]=\"checked\"\n\t\t\t(change)=\"onChange($event)\"\n\t\t\t(click)=\"onClick($event)\">\n\t\t<label *ngIf=\"size === 'md'\" class=\"bx--toggle__label\" [for]=\"id\">\n\t\t\t<span class=\"bx--toggle__text--left\">Off</span>\n\t\t\t<span class=\"bx--toggle__appearance\"></span>\n\t\t\t<span class=\"bx--toggle__text--right\">On</span>\n\t\t</label>\n\t\t<label *ngIf=\"size === 'sm'\" class=\"bx--toggle__label\" [for]=\"id\">\n\t\t\t<span class=\"bx--toggle__appearance\">\n\t\t\t\t<svg class=\"bx--toggle__check\" width=\"6px\" height=\"5px\" viewBox=\"0 0 6 5\">\n\t\t\t\t\t<path d=\"M2.2 2.7L5 0 6 1 2.2 5 0 2.7 1 1.5z\"/>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t</label>\n\t`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: Switch,\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class Switch extends Checkbox {\n\t/**\n\t * Variable used for creating unique ids for switch components.\n\t */\n\tstatic switchCount = 0;\n\n\t/**\n\t * Size of the switch component.\n\t */\n\t@Input() size: \"sm\" | \"md\" = \"md\";\n\n\t/**\n\t * The unique id allocated to the `Switch`.\n\t */\n\tid = \"switch-\" + Switch.switchCount;\n\n\t/**\n\t * Emits event notifying other classes when a change in state occurs on a switch after a\n\t * click.\n\t */\n\t@Output() change = new EventEmitter<SwitchChange>();\n\n\t/**\n\t * Creates an instance of Switch.\n\t */\n\tconstructor(protected changeDetectorRef: ChangeDetectorRef) {\n\t\tsuper(changeDetectorRef);\n\t\tSwitch.switchCount++;\n\n\t\tconsole.warn(\"`ibm-switch` has been deprecated in favour of `ibm-toggle`\");\n\t}\n\n\t/**\n\t * Creates instance of `SwitchChange` used to propagate the change event.\n\t * @memberof To\n\t */\n\temitChangeEvent() {\n\t\tlet event = new SwitchChange();\n\t\tevent.source = this;\n\t\tevent.checked = this.checked;\n\n\t\tthis.propagateChange(this.checked);\n\t\tthis.change.emit(event);\n\t}\n}\n"]}