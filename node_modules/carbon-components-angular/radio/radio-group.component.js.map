{"version":3,"file":"radio-group.component.js","sourceRoot":"","sources":["../src/radio/radio-group.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tAfterContentInit,\n\tChangeDetectorRef,\n\tContentChildren,\n\tComponent,\n\tElementRef,\n\tEventEmitter,\n\tforwardRef,\n\tInput,\n\tOnInit,\n\tOutput,\n\tQueryList,\n\tRenderer2,\n\tHostBinding\n} from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from \"@angular/forms\";\nimport { Radio } from \"./radio.component\";\n\n/**\n * Used to emit changes performed on a `Radio`.\n * @export\n * @class RadioChange\n */\nexport class RadioChange {\n\t/**\n\t * Contains the `Radio` that has been changed.\n\t * @type {(Radio | null)}\n\t * @memberof RadioChange\n\t */\n\tsource: Radio | null;\n\t/**\n\t * The value of the `Radio` encompassed in the `RadioChange` class.\n\t * @type {any}\n\t * @memberof RadioChange\n\t */\n\tvalue: any;\n}\n\n/**\n * class: RadioGroup\n *\n * selector: `ibm-radio-group`\n *\n * source: `src/forms/radio.component.ts`\n *\n *\n * Ex:\n * ```html\n * <ibm-radio-group [(ngModel)]=\"radio\">\n * \t<ibm-radio *ngFor=\"let one of manyRadios\" [value]=\"one\">\n *\t\tRadio {{one}}\n * \t</ibm-radio>\n * </ibm-radio-group>\n *\n * Radio selected: {{radio}}\n * ```\n *\n * ```typescript\n * manyRadios = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"];\n * ```\n *\n * Also see: [`Radio`](#ibm-radio)\n *\n */\n@Component({\n\tselector: \"ibm-radio-group\",\n\ttemplate: `<ng-content></ng-content>`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: RadioGroup,\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class RadioGroup implements OnInit, AfterContentInit, ControlValueAccessor {\n\t/**\n\t * Used for creating the `RadioGroup` 'name' property dynamically.\n\t */\n\tstatic radioGroupCount = 0;\n\n\t/**\n\t * Emits event notifying other classes of a change using a `RadioChange` class.\n\t * @type {EventEmitter<RadioChange>}\n\t */\n\t@Output() change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n\t/**\n\t * The `Radio` input items in the `RadioGroup`.\n\t */\n\t// tslint:disable-next-line:no-forward-ref\n\t@ContentChildren(forwardRef(() => Radio)) radios: QueryList<Radio>;\n\n\t/**\n\t * Determines the render size of the `Radio` inputs within the group.\n\t */\n\t@Input() size: \"sm\" | \"md\" = \"md\";\n\n\t/**\n\t * Returns the `Radio` that is selected within the `RadioGroup`.\n\t * @readonly\n\t */\n\t@Input()\n\tget selected() {\n\t\treturn this._selected;\n\t}\n\t/**\n\t * Sets the passed in `Radio` item as the selected input within the `RadioGroup`.\n\t */\n\tset selected(selected: Radio | null) {\n\t\tthis._selected = selected;\n\t\tthis.value = selected ? selected.value : null;\n\t\tthis.checkSelectedRadio();\n\t}\n\n\t/**\n\t * Returns the value/state of the selected `Radio` within the `RadioGroup`.\n\t */\n\t@Input()\n\tget value() {\n\t\treturn this._value;\n\t}\n\t/**\n\t * Sets the value/state of the selected `Radio` within the `RadioGroup` to the passed in value.\n\t */\n\tset value(newValue: any) {\n\t\tif (this._value !== newValue) {\n\t\t\tthis._value = newValue;\n\n\t\t\tthis.updateSelectedRadioFromValue();\n\t\t\tthis.checkSelectedRadio();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the associated name of the `RadioGroup`.\n\t */\n\t@Input()\n\tget name() {\n\t\treturn this._name;\n\t}\n\t/**\n\t * Replaces the name associated with the `RadioGroup` with the provided parameter.\n\t */\n\tset name(name: string) {\n\t\tthis._name = name;\n\t\tthis.updateRadioNames();\n\t}\n\n\t/**\n\t * Returns the disabled value in the `RadioGroup` if there is one.\n\t */\n\t@Input()\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\t/**\n\t * Updates the disabled value using the provided parameter and marks the radios to be checked for\n\t * changes.\n\t */\n\tset disabled(value) {\n\t\tthis._disabled = value;\n\t\tthis.markRadiosForCheck();\n\t}\n\n\t/**\n\t * Binds 'radiogroup' value to the role attribute for `RadioGroup`.\n\t */\n\t@HostBinding(\"attr.role\") role = \"radiogroup\";\n\n\t/**\n\t * Binds 'bx--radio-button-group' value to the class for `RadioGroup`.\n\t */\n\t@HostBinding(\"class.bx--radio-button-group\") radioButtonGroupClass = true;\n\n\t/**\n\t * To track whether the `RadioGroup` has been initialized.\n\t */\n\tprotected isInitialized = false;\n\t/**\n\t * Reflects whether or not the input is disabled and cannot be selected.\n\t */\n\tprotected _disabled = false;\n\t/**\n\t * The value of the selected option within the `RadioGroup`.\n\t */\n\tprotected _value: any = null;\n\t/**\n\t * The `Radio` within the `RadioGroup` that is selected.\n\t */\n\tprotected _selected: Radio = null;\n\t/**\n\t * The name attribute associated with the `RadioGroup`.\n\t */\n\tprotected _name = `radio-group-${RadioGroup.radioGroupCount}`;\n\n\t/**\n\t * Creates an instance of RadioGroup.\n\t */\n\tconstructor(protected changeDetectorRef: ChangeDetectorRef, protected elementRef: ElementRef, protected renderer: Renderer2) {\n\t\tRadioGroup.radioGroupCount++;\n\t}\n\n\t/**\n\t * Updates the selected `Radio` to be checked (selected).\n\t */\n\tcheckSelectedRadio() {\n\t\tif (this._selected && !this._selected.checked) {\n\t\t\tthis._selected.checked = true;\n\t\t}\n\t}\n\n\t/**\n\t * Use the value of the `RadioGroup` to update the selected radio to the right state (selected state).\n\t */\n\tupdateSelectedRadioFromValue() {\n\t\tlet alreadySelected = this._selected != null && this._selected.value === this._value;\n\n\t\tif (this.radios != null && !alreadySelected) {\n\t\t\tthis._selected = null;\n\t\t\tthis.radios.forEach(radio => {\n\t\t\t\tradio.checked = this.value === radio.value;\n\t\t\t\tif (radio.checked) {\n\t\t\t\t\tthis._selected = radio;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Creates a class of `RadioChange` to emit the change in the `RadioGroup`.\n\t */\n\temitChangeEvent() {\n\t\tif (this.isInitialized) {\n\t\t\tlet event = new RadioChange();\n\t\t\tevent.source = this._selected;\n\t\t\tevent.value = this._value;\n\t\t\tthis.change.emit(event);\n\t\t}\n\t}\n\n\t/**\n\t * Calls the `markForCheck()` function within the `changeDetectorRef` class\n\t * to trigger Angular's change detection on each radio item.\n\t */\n\tmarkRadiosForCheck() {\n\t\tif (this.radios) {\n\t\t\tthis.radios.forEach(radio => radio.markForCheck());\n\t\t}\n\t}\n\n\t/**\n\t * Synchronizes the names of the radio items with the name of the `RadioGroup`.\n\t */\n\tupdateRadioNames() {\n\t\tif (this.radios) {\n\t\t\tthis.radios.forEach(radio => radio.name = this.name);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the value of the `RadioGroup` using the provided parameter.\n\t */\n\twriteValue(value: any) {\n\t\tthis.value = value;\n\t\tthis.changeDetectorRef.markForCheck();\n\t}\n\n\t/**\n\t * Callback triggered when a `Radio` within the `RadioGroup` is changed.\n\t */\n\ttouch() {\n\t\tif (this.onTouched) {\n\t\t\tthis.onTouched();\n\t\t}\n\t}\n\n\t/**\n\t * Builds variant class on the radio items within the `RadioGroup`.\n\t */\n\tngOnInit() {\n\t\t// Build variant class\n\t\tconst className = `radio${this.size !== \"md\" ? `--${this.size}` : \"\"}`;\n\n\t\t// Add class to host element\n\t\tthis.renderer.addClass(this.elementRef.nativeElement, className);\n\t}\n\n\t/**\n\t * Marks this component as initialized to avoid the initial value getting set by `NgModel` on `RadioGroup`.\n\t * This avoids `NgModel` setting the initial value before the OnInit of the `RadioGroup`.\n\t */\n\tngAfterContentInit() {\n\t\t// Mark this component as initialized in AfterContentInit because the initial value can\n\t\t// possibly be set by NgModel on RadioGroup, and it is possible that the OnInit of the\n\t\t// NgModel occurs *after* the OnInit of the RadioGroup.\n\t\tthis.isInitialized = true;\n\t\tthis.updateFocusableRadio();\n\n\t\tthis.radios.changes.subscribe(updatedRadios => {\n\t\t\tthis.radios = updatedRadios;\n\t\t\tthis.updateFocusableRadio();\n\t\t});\n\t}\n\n\tupdateFocusableRadio() {\n\t\tif (this.radios && !this.radios.some(radio => radio.checked)) {\n\t\t\tthis.radios.forEach(radio => radio.needsToBeFocusable = false);\n\t\t\tthis.radios.first.needsToBeFocusable = true;\n\t\t\tthis.radios.forEach(radio => radio.changeDetectorRef.detectChanges());\n\t\t}\n\t}\n\n\t/**\n\t * Used to set method to propagate changes back to the form.\n\t */\n\tpublic registerOnChange(fn: any) {\n\t\tthis.propagateChange = value => {\n\t\t\tthis.value = value;\n\t\t\tfn(value);\n\t\t};\n\t}\n\n\t/**\n\t * Registers a callback to be triggered when the control has been touched.\n\t * @param fn Callback to be triggered when the checkbox is touched.\n\t */\n\tpublic registerOnTouched(fn: any) {\n\t\tthis.onTouched = fn;\n\t}\n\n\t/**\n\t * Needed to properly implement ControlValueAccessor.\n\t */\n\tonTouched: () => any = () => {};\n\n\t/**\n\t * Method set in registerOnChange to propagate changes back to the form.\n\t */\n\tpropagateChange = (_: any) => {};\n}\n"]}