{"version":3,"file":"radio.component.js","sourceRoot":"","sources":["../src/radio/radio.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tChangeDetectorRef,\n\tComponent,\n\tElementRef,\n\tInput,\n\tOnInit,\n\tOptional,\n\tRenderer2,\n\tHostBinding\n} from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { Checkbox } from \"../checkbox/checkbox.component\";\nimport { RadioGroup } from \"./radio-group.component\";\n\n/**\n * class: Radio (extends Checkbox)\n *\n * selector: `n-radio`\n *\n * source: `src/forms/radio.component.ts`\n *\n * ```html\n * <ibm-radio [(ngModel)]=\"radioState\">Radio</ibm-radio>\n * ```\n *\n * Also see: [`RadioGroup`](#ibm-radio-group)\n *\n * @export\n * @class Radio\n * @extends {Checkbox}\n * @implements {OnInit}\n */\n@Component({\n\tselector: \"ibm-radio\",\n\ttemplate: `\n\t\t<input\n\t\t\tclass=\"bx--radio-button\"\n\t\t\ttype=\"radio\"\n\t\t\t#inputCheckbox\n\t\t\t[checked]=\"checked\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[name]=\"name\"\n\t\t\t[id]=\"id\"\n\t\t\t[required]=\"required\"\n\t\t\t[value]=\"value\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t(change)=\"onChange($event)\"\n\t\t\t(click)=\"onClick($event)\"\n\t\t\t[tabindex]=\"(checked || needsToBeFocusable ? 0 : -1)\">\n\t\t<label\n\t\t\tclass=\"bx--radio-button__label\"\n\t\t\t[for]=\"id\">\n\t\t\t<span class=\"bx--radio-button__appearance\"></span>\n\t\t\t<ng-content></ng-content>\n\t\t</label>\n\t`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: Radio,\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class Radio extends Checkbox implements OnInit {\n\t/**\n\t * Used to dynamically create unique ids for the `Radio`.\n\t * @static\n\t * @memberof Radio\n\t */\n\tstatic radioCount = 0;\n\n\t/**\n\t * Returns the value/state of the `Radio`.\n\t * @readonly\n\t * @type {any}\n\t * @returns {any}\n\t * @memberof Radio\n\t */\n\t@Input()\n\tget value(): any {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * Replaces `@Input value` with the provided parameter supplied from the parent.\n\t * @param {any} value\n\t * @memberof Radio\n\t */\n\tset value(value: any) {\n\t\tif (this._value !== value) {\n\t\t\tthis._value = value;\n\t\t\tif (this.radioGroup != null) {\n\t\t\t\tif (!this.checked) {\n\t\t\t\t\tthis.checked = this.radioGroup.value === value;\n\t\t\t\t}\n\t\t\t\tif (this.checked) {\n\t\t\t\t\tthis.radioGroup.selected = this;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Binds 'radio' value to the role attribute for `Radio`.\n\t * @memberof Radio\n\t */\n\t@HostBinding(\"attr.role\") role = \"radio\";\n\n\t/**\n\t * The id for the `Radio`.\n\t * @type {string}\n\t * @memberof Radio\n\t */\n\tid = `radio-${Radio.radioCount}`;\n\t/**\n\t * The radio group that this `Radio` belongs to (if any).\n\t * @type {RadioGroup}\n\t * @memberof Radio\n\t */\n\tradioGroup: RadioGroup;\n\t/**\n\t * set to true if the `Radio` needs a tabIndex of 0.\n\t * @type {RadioGroup}\n\t * @memberof Radio\n\t */\n\tneedsToBeFocusable: boolean;\n\t/**\n\t * The value of the `Radio`.\n\t * @type {any}\n\t * @memberof Radio\n\t */\n\t_value: any = null;\n\n\t/**\n\t * Creates an instance of Radio.\n\t * @param {RadioGroup} radioGroup\n\t * @param {ChangeDetectorRef} changeDetectorRef\n\t * @param {ElementRef} elementRef\n\t * @param {Renderer2} renderer\n\t * @memberof Radio\n\t */\n\tconstructor(@Optional() radioGroup: RadioGroup,\n\t\t\t\tpublic changeDetectorRef: ChangeDetectorRef, protected elementRef: ElementRef, protected renderer: Renderer2) {\n\t\tsuper(changeDetectorRef);\n\t\tRadio.radioCount++;\n\t\tthis.radioGroup = radioGroup;\n\t}\n\n\t/**\n\t * If the component has an encompassing `RadioGroup` it synchronizes the name with that\n\t * of the group.\n\t * @memberof Radio\n\t */\n\tngOnInit() {\n\t\tif (this.radioGroup) {\n\t\t\t// if in group check if it needs checked and use group name\n\t\t\tthis.checked = this.radioGroup.value === this._value;\n\t\t\tthis.name = this.radioGroup.name;\n\t\t}\n\t}\n\n\t/**\n\t * Handles the event of a mouse click on the `Radio`.\n\t * @param {Event} event\n\t * @memberof Radio\n\t */\n\tonClick(event: Event) {\n\t\tevent.stopPropagation();\n\t}\n\n\t/**\n\t * Synchronizes with the `RadioGroup` in the event of a changed `Radio`.\n\t * Emits the changes of both the `RadioGroup` and `Radio`.\n\t * @param {Event} event\n\t * @memberof Radio\n\t */\n\tonChange(event: Event) {\n\t\tevent.stopPropagation();\n\n\t\tlet groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n\t\tthis.checked = true;\n\t\tthis.emitChangeEvent();\n\n\t\tif (this.radioGroup) {\n\t\t\tthis.radioGroup.propagateChange(this.value);\n\t\t\tthis.radioGroup.touch();\n\t\t\tif (groupValueChanged) {\n\t\t\t\tthis.radioGroup.emitChangeEvent();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Calls the `markForCheck()` function within the `changeDetectorRef` class\n\t * to make sure that Angular's change detection is triggered for the input.\n\t * @memberof Radio\n\t */\n\tmarkForCheck() {\n\t\tthis.changeDetectorRef.markForCheck();\n\t}\n}\n"]}