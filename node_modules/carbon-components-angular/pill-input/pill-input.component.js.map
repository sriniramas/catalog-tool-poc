{"version":3,"file":"pill-input.component.js","sourceRoot":"","sources":["../src/pill-input/pill-input.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tElementRef,\n\tViewChild,\n\tViewChildren,\n\tQueryList,\n\tOnChanges,\n\tAfterViewInit,\n\tHostBinding\n} from \"@angular/core\";\nimport { Pill } from \"./pill.component\";\nimport { ListItem } from \"./../dropdown/list-item.interface\";\n\n\n/**\n * Internal component used to render pills and the pill text input.\n * There is a sizeable chunk of logic here handling focus and keyboard state around pills.\n *\n * @export\n * @class PillInput\n * @implements {OnChanges}\n * @implements {AfterViewInit}\n */\n@Component({\n\tselector: \"ibm-pill-input\",\n\ttemplate: `\n\t\t<div\n\t\t\t#inputWrapper\n\t\t\t*ngIf=\"type === 'multi'\"\n\t\t\trole=\"textbox\"\n\t\t\tclass=\"pill_input_wrapper\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'expand-overflow': expanded,\n\t\t\t\tfocus: focusActive,\n\t\t\t\tdisabled: disabled\n\t\t\t}\"\n\t\t\tstyle=\"overflow: hidden;\"\n\t\t\t(click)=\"focusInput($event)\">\n\t\t\t<span\n\t\t\t\t*ngIf=\"showPlaceholder\"\n\t\t\t\tclass=\"input_placeholder\">\n\t\t\t\t{{ placeholder }}\n\t\t\t</span>\n\t\t\t<div\n\t\t\t\t#pillWrapper\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'input_pills--column': pillDirection === 'column',\n\t\t\t\t\t'input_pills': pillDirection === 'row'\n\t\t\t\t}\">\n\t\t\t\t<div style=\"display: flex\" *ngFor=\"let pill of pills; let last = last\">\n\t\t\t\t\t<ibm-pill\n\t\t\t\t\t\t[item]=\"pill\">\n\t\t\t\t\t\t{{ pill.content }}\n\t\t\t\t\t</ibm-pill>\n\t\t\t\t\t<div\n\t\t\t\t\t\t#pillInput\n\t\t\t\t\t\t*ngIf=\"!last\"\n\t\t\t\t\t\tclass=\"input\"\n\t\t\t\t\t\tcontenteditable\n\t\t\t\t\t\t(keydown)=\"onKeydown($event)\"\n\t\t\t\t\t\t(keyup)=\"onKeyup($event)\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\t#pillInput\n\t\t\t\t\tclass=\"input\"\n\t\t\t\t\tcontenteditable\n\t\t\t\t\t(keydown)=\"onKeydown($event)\"\n\t\t\t\t\t(keyup)=\"onKeyup($event)\"></div>\n\t\t\t</div>\n\t\t\t<button\n\t\t\t\t*ngIf=\"!expanded && numberMore > 0\"\n\t\t\t\tclass=\"btn--link\"\n\t\t\t\thref=\"\"\n\t\t\t\t(click)=\"showMore($event)\">{{ numberMore }} more</button>\n\t\t\t<button\n\t\t\t\t*ngIf=\"expanded && numberMore > 0\"\n\t\t\t\tclass=\"btn--link\"\n\t\t\t\thref=\"\"\n\t\t\t\t(click)=\"showMore($event)\">Hide</button>\n\t\t</div>\n\t\t<input\n\t\t\t#singleInput\n\t\t\t*ngIf=\"type === 'single'\"\n\t\t\ttype=\"text\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[placeholder]=\"placeholder\"\n\t\t\t(keydown)=\"onKeydown($event)\"\n\t\t\t(keyup)=\"onKeyup($event)\"/>`\n})\nexport class PillInput implements OnChanges, AfterViewInit {\n\t/** are we focused? needed because we have a lot of inputs that could steal focus and we need to set visual focus on the wrapper */\n\tpublic focusActive = false;\n\t/** height of the expanded input */\n\tpublic expandedHeight = 0;\n\t/** number of pills hidden by overflow */\n\tpublic numberMore = 0;\n\t/** should we show the placeholder value? */\n\tpublic showPlaceholder = true;\n\t/** sets the expanded state (hide/show all selected pills) */\n\tpublic expanded = false;\n\t/** array of selected items */\n\t@Input() pills: Array<ListItem> = [];\n\t/** value to display when nothing is selected */\n\t@Input() placeholder = \"\";\n\t/** value to display when something is selected */\n\t@Input() displayValue = \"\";\n\t/** \"single\" or \"multi\" for single or multi select lists */\n\t@Input() type: \"single\" | \"multi\" = \"single\";\n\t@Input() size: \"sm\" | \"md\" | \"lg\" = \"md\";\n\t/** is the input disabled. true/false */\n\t@Input() disabled = false;\n\t/** the direction of the pills */\n\t@Input() pillDirection: \"row\" | \"column\" = \"row\";\n\t/** empty event to trigger an update of the selected items */\n\t@Output() updatePills = new EventEmitter();\n\t/** emitted when the user types into an input */\n\t@Output() search = new EventEmitter();\n\t/** emitted when the user presses enter and a value is present */\n\t@Output() submit = new EventEmitter();\n\t/** emitted when the component is focused */\n\t@Output() focus = new EventEmitter();\n\t/** emitted when the component looses focus */\n\t@Output() blur = new EventEmitter();\n\t/** ViewChild of the pill wrapper */\n\t@ViewChild(\"pillWrapper\") pillWrapper;\n\t/** ViewChild for the overall wrapper */\n\t@ViewChild(\"inputWrapper\") inputWrapper;\n\t/** ViewChild for the single input input box */\n\t@ViewChild(\"singleInput\") singleInput;\n\t/** List of inputs */\n\t@ViewChildren(\"pillInput\") pillInputs: QueryList<any>;\n\t/** list of instantiated pills */\n\t@ViewChildren(Pill) pillInstances: QueryList<Pill>;\n\t// needed since matter doesn't/can't account for the host element\n\t@HostBinding(\"style.width.%\") width = \"100\";\n\n\t/** instaniates a pill-input */\n\tconstructor(protected elementRef: ElementRef) {}\n\n\t/**\n\t * Updates the pills, and subscribes to their `remove` events.\n\t * Updates the displayValue and checks if it should be displayed.\n\t * @param changes\n\t */\n\tngOnChanges(changes) {\n\t\tif (changes.pills) {\n\t\t\tthis.pills = changes.pills.currentValue;\n\t\t\tif (this.pillDirection === \"column\") {\n\t\t\t\tthis.numberMore = this.pills.length - 1;\n\t\t\t}\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (this.pillInstances) {\n\t\t\t\t\tthis.numberMore = 0;\n\t\t\t\t\tlet pills = this.elementRef.nativeElement.querySelectorAll(\".pill\");\n\t\t\t\t\tif (pills.length > 1) {\n\t\t\t\t\t\tfor (let pill of pills) {\n\t\t\t\t\t\t\tif (pill.offsetTop > 30) {\n\t\t\t\t\t\t\t\tthis.numberMore++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.pillInstances.forEach(item => {\n\t\t\t\t\t\titem.remove.subscribe(() => {\n\t\t\t\t\t\t\tthis.updatePills.emit();\n\t\t\t\t\t\t\tthis.doResize();\n\t\t\t\t\t\t\tif (this.numberMore === 0) { this.expanded = false; }\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tthis.doResize();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (changes.displayValue) {\n\t\t\tif (this.type === \"single\" && this.singleInput) {\n\t\t\t\tthis.singleInput.nativeElement.value = changes.displayValue.currentValue;\n\t\t\t}\n\t\t\tthis.checkPlaceholderVisibility();\n\t\t}\n\t}\n\n\t/**\n\t * Binds events on the view.\n\t * @returns null\n\t * @memberof PillInput\n\t */\n\tngAfterViewInit() {\n\t\tif (this.inputWrapper) {\n\t\t\tthis.inputWrapper.nativeElement.scrollTop = 0;\n\t\t}\n\n\t\t// TODO: move these to methods and late bind/eager unbind\n\t\tif (this.disabled) { return; }\n\t\t// collapse input on outside click\n\t\tdocument.addEventListener(\"click\", ev => {\n\t\t\tif (this.elementRef.nativeElement.contains(ev.target)) {\n\t\t\t\tthis.setFocus(true);\n\t\t\t} else {\n\t\t\t\tthis.setFocus(false);\n\t\t\t}\n\t\t\tthis.checkPlaceholderVisibility();\n\t\t});\n\t\t// keyup here because we want to get the element the event ends on\n\t\t// **not** the element the event starts from (that would be keydown)\n\t\tdocument.addEventListener(\"keyup\", ev => {\n\t\t\tif (!this.elementRef.nativeElement.contains(ev.target)) {\n\t\t\t\tthis.setFocus(false);\n\t\t\t} else {\n\t\t\t\tthis.setFocus(true);\n\t\t\t}\n\t\t\tthis.checkPlaceholderVisibility();\n\t\t});\n\t\tthis.clearInputText();\n\t}\n\n\t/**\n\t * Helper method to check if an array is empty\n\t * @param {Array<any>} array\n\t */\n\tpublic empty(array: Array<any>) {\n\t\tif (!array) {\n\t\t\treturn true;\n\t\t}\n\t\tif (array.length === 0) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * sets focus to state\n\t *\n\t * @param {boolean} state\n\t */\n\tpublic setFocus(state: boolean) {\n\t\tthis.focusActive = state;\n\n\t\tif (this.focusActive) {\n\t\t\tthis.focus.emit();\n\t\t} else {\n\t\t\tthis.blur.emit();\n\t\t}\n\t}\n\n\t/**\n\t * focuses the correct input and handles clearing any unnecessary values from any other input\n\t *\n\t * @param ev\n\t */\n\tpublic focusInput(ev) {\n\t\tif (this.disabled) { return; }\n\t\tthis.setFocus(true);\n\t\tif (this.numberMore > 0 || this.pillDirection === \"column\") {\n\t\t\tthis.expandedHeight = this.pillWrapper.nativeElement.offsetHeight;\n\t\t\tthis.expanded = true;\n\t\t}\n\t\tif (this.pillInputs.find(input => input.nativeElement === ev.target)) {\n\t\t\tif (ev.target.textContent === \"\") {\n\t\t\t\tev.target.textContent = \"\";\n\t\t\t}\n\t\t\tthis.clearInputText(ev.target);\n\t\t\tthis.setSelection(ev.target);\n\t\t} else if (this.getInputText()) {\n\t\t\tthis.pillInputs.forEach(input => {\n\t\t\t\tif (input.nativeElement.textContent.trim() !== \"\") {\n\t\t\t\t\tthis.setSelection(input.nativeElement);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tif (this.pillInputs.last.nativeElement.textContent === \"\") {\n\t\t\t\tthis.pillInputs.last.nativeElement.textContent = \"\";\n\t\t\t}\n\t\t\tthis.setSelection(this.pillInputs.last.nativeElement);\n\t\t}\n\t\tthis.inputWrapper.nativeElement.scrollTop = 0;\n\t}\n\n\t/**\n\t * toggles the expanded state of the input wrapper to show all pills\n\t *\n\t * @param ev\n\t */\n\tpublic showMore(ev) {\n\t\tev.stopPropagation();\n\t\tev.preventDefault();\n\t\tthis.expanded = !this.expanded;\n\t\tthis.doResize();\n\t}\n\n\t/**\n\t * sets the height of the input wrapper to the correct height for all selected pills\n\t */\n\tpublic doResize() {\n\t\tif (this.expanded) {\n\t\t\tthis.expandedHeight = this.pillWrapper.nativeElement.offsetHeight;\n\t\t}\n\t}\n\n\t/**\n\t * clears the content of inputs\n\t *\n\t * @param toSkip input element to skip clearing\n\t */\n\tpublic clearInputText(toSkip = null) {\n\t\tif (this.pillInputs) {\n\t\t\tthis.pillInputs.forEach(input => {\n\t\t\t\tif (!toSkip || input.nativeElement !== toSkip) {\n\t\t\t\t\tinput.nativeElement.textContent = \"\";\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * returns the text from an event, the textContent of the first filled pillInput, or an empty string\n\t *\n\t * @param ev optional event to pull text from\n\t */\n\tpublic getInputText(ev = null): string {\n\t\tif (this.type === \"multi\") {\n\t\t\tif (ev) {\n\t\t\t\treturn ev.target.textContent.trim();\n\t\t\t}\n\t\t\tif (this.pillInputs) {\n\t\t\t\tlet text = this.pillInputs.find(input => input.nativeElement.textContent.trim() !== \"\");\n\t\t\t\treturn text ? text.nativeElement.textContent.trim() : \"\";\n\t\t\t}\n\t\t}\n\t\tif (this.type === \"single\" && ev) {\n\t\t\treturn ev.target.value.trim();\n\t\t}\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * handles deleting pills on backspace, submitting user input on enter, and navigating the pill list with arrow left/right\n\t *\n\t * @param ev\n\t */\n\tonKeydown(ev: KeyboardEvent) {\n\t\tif (ev.key === \"Escape\") {\n\t\t\tthis.expanded = false;\n\t\t} else if (ev.key === \"Backspace\" && ev.target[\"textContent\"] === \"\" && !this.empty(this.pills)) {\n\t\t\t// stop the window from navigating backwards\n\t\t\tev.preventDefault();\n\t\t\tlet inputIndex = this.pillInputs.toArray().findIndex(input => input.nativeElement === ev.target);\n\t\t\tif (inputIndex > -1) {\n\t\t\t\tthis.pills[inputIndex].selected = false;\n\t\t\t\t// - 1 because the last one doesn't get removed, so the focus doesn't leave\n\t\t\t\tif (inputIndex < this.pillInputs.length - 1) {\n\t\t\t\t\tthis.pillInputs.toArray()[inputIndex + 1].nativeElement.focus();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.updatePills.emit();\n\t\t} else if (ev.key === \"Enter\") {\n\t\t\tev.preventDefault();\n\t\t\tif (this.getInputText()) {\n\t\t\t\tlet inputIndex = this.pillInputs.toArray().findIndex(input => input.nativeElement.textContent.trim() !== \"\");\n\t\t\t\tthis.submit.emit({\n\t\t\t\t\tafter: this.pills[inputIndex],\n\t\t\t\t\tvalue: this.getInputText()\n\t\t\t\t});\n\t\t\t\tthis.clearInputText();\n\t\t\t}\n\t\t} else if (ev.key === \"ArrowLeft\") {\n\t\t\tlet index = this.pillInputs.toArray().findIndex(input => input.nativeElement === ev.target);\n\t\t\tlet prevInput = this.pillInputs.toArray()[index - 1];\n\t\t\tif (prevInput) { prevInput.nativeElement.focus(); }\n\t\t} else if (ev.key === \"ArrowRight\") {\n\t\t\tlet index = this.pillInputs.toArray().findIndex(input => input.nativeElement === ev.target);\n\t\t\tlet nextInput = this.pillInputs.toArray()[index + 1];\n\t\t\tif (nextInput) { nextInput.nativeElement.focus(); }\n\t\t}\n\t}\n\n\t/** handles emmiting the search event */\n\tonKeyup(ev: KeyboardEvent) {\n\t\tthis.doResize();\n\t\tthis.clearInputText(ev.target);\n\t\tthis.search.emit(this.getInputText(ev));\n\t}\n\n\t/**\n\t * checks weather the placeholder should be displayed or not.\n\t */\n\tprotected checkPlaceholderVisibility(): void {\n\t\tif (this.type === \"single\") {\n\t\t\tsetTimeout(() => this.showPlaceholder = !this.displayValue && !this.focusActive && !this.getInputText());\n\t\t} else {\n\t\t\tsetTimeout(() => this.showPlaceholder = this.empty(this.pills) && !this.focusActive && !this.getInputText());\n\t\t}\n\t}\n\n\t/**\n\t * selects all the text in a given node\n\t *\n\t * @param target node to set the selection on\n\t */\n\tprotected setSelection(target) {\n\t\tlet selectionRange = document.createRange();\n\t\tlet selection = window.getSelection();\n\t\tselectionRange.selectNodeContents(target);\n\t\tselection.removeAllRanges();\n\t\tselection.addRange(selectionRange);\n\t\ttarget.focus();\n\t}\n}\n"]}