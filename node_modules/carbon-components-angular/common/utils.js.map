{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/common/utils.ts"],"names":[],"mappings":"AAAA,cAAc,yBAAyB,CAAC;AAExC;;;;;;;;;;;;GAYG;AACH,MAAM,gBAAgB,IAAY,EAAE,KAAS,EAAE,IAAQ;IAAnB,sBAAA,EAAA,SAAS;IAAE,qBAAA,EAAA,QAAQ;IACtD,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,IAAI,GAAG,KAAK,EAAhB,CAAgB,CAAC,CAAC;AACxF,CAAC","sourcesContent":["export * from \"./../utils/window-tools\";\n\n/**\n * Does what python's `range` function does, with a slightly different\n * signature because of Typescript limitations.\n *\n * Useful for numbered loops in angular templates, since we can do\n * a normal for loop.\n *\n * @export\n * @param {number} stop Generate numbers up to, but not including this number\n * @param {number} [start=0] Starting number of the sequence\n * @param {number} [step=1] Difference between each number in the sequence\n * @returns and array with resulting numbers\n */\nexport function range(stop: number, start = 0, step = 1) {\n\treturn Array(Math.ceil((stop - start) / step)).fill(0).map((x, i) => i * step + start);\n}\n"]}