{"version":3,"file":"inline-loading.component.js","sourceRoot":"","sources":["../src/inline-loading/inline-loading.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACN,SAAS,EACT,KAAK,EACL,MAAM,EACN,YAAY,EACZ,WAAW,EACX,MAAM,eAAe,CAAC;AAEvB;IAAA;QAkCC;;;;WAIG;QACM,iBAAY,GAAG,IAAI,CAAC;QAoB7B;;;;;WAKG;QACO,cAAS,GAAsB,IAAI,YAAY,EAAE,CAAC;QAEnB,iBAAY,GAAG,IAAI,CAAC;QAE7D;;;;WAIG;QACO,aAAQ,GAAG,KAAK,CAAC;IAC5B,CAAC;IA/BA,sBAAa,kCAAO;QAHpB;;WAEG;aACH;YACC,OAAO,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QACD;;WAEG;aACH,UAAa,OAAgB;YAA7B,iBAOC;YANA,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClB,UAAU,CAAC;oBACV,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;gBACvB,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;aACtB;QACF,CAAC;;;OAXA;;gBA9CD,SAAS,SAAC;oBACV,QAAQ,EAAE,oBAAoB;oBAC9B,QAAQ,EAAE,wzBAiBT;iBACD;;;8BAOC,KAAK;8BAML,KAAK;+BAML,KAAK;0BAKL,KAAK;4BAqBL,MAAM;+BAEN,WAAW,SAAC,0BAA0B;;IAQxC,oBAAC;CAAA,AA3ED,IA2EC;SAtDY,aAAa","sourcesContent":["import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tHostBinding\n} from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-inline-loading\",\n\ttemplate: `\n\t\t<div class=\"bx--inline-loading__animation\">\n\t\t\t<div\n\t\t\t\t*ngIf=\"success === false\"\n\t\t\t\tclass=\"bx--loading bx--loading--small\">\n\t\t\t\t<svg class=\"bx--loading__svg\" viewBox=\"-75 -75 150 150\">\n\t\t\t\t\t<circle cx=\"0\" cy=\"0\" r=\"37.5\"></circle>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"success === true\"\n\t\t\t\tclass=\"bx--inline-loading__checkmark-container bx--inline-loading__svg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 10\">\n\t\t\t\t<polyline class=\"bx--inline-loading__checkmark\" points=\"0.74 3.4 3.67 6.34 9.24 0.74\"></polyline>\n\t\t\t</svg>\n\t\t</div>\n\t\t<p *ngIf=\"success === false\" class=\"bx--inline-loading__text\">{{loadingText}}</p>\n\t\t<p *ngIf=\"success === true\" class=\"bx--inline-loading__text\">{{successText}}</p>\n\t`\n})\nexport class InlineLoading {\n\t/**\n\t * Specify the text description for the loading state.\n\t *\n\t * @memberof InlineLoading\n\t */\n\t@Input() loadingText;\n\t/**\n\t * Specify the text description for the success state.\n\t *\n\t * @memberof InlineLoading\n\t */\n\t@Input() successText;\n\t/**\n\t * Provide a delay for the `setTimeout` for success.\n\t *\n\t * @memberof InlineLoading\n\t */\n\t@Input() successDelay = 1500;\n\n\t/**\n\t * Returns value `true` if the component is in the success state.\n\t */\n\t@Input() get success() {\n\t\treturn this._success;\n\t}\n\t/**\n\t * Set the component's state to match the parameter and emits onSuccess if it exits.\n\t */\n\tset success (success: boolean) {\n\t\tthis._success = success;\n\t\tif (this._success) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.onSuccess.emit();\n\t\t\t}, this.successDelay);\n\t\t}\n\t}\n\n\t/**\n\t * Emits event after the success state is active\n\t *\n\t * @type {EventEmitter<any>}\n\t * @memberof InlineLoading\n\t */\n\t@Output() onSuccess: EventEmitter<any> = new EventEmitter();\n\n\t@HostBinding(\"class.bx--inline-loading\") loadingClass = true;\n\n\t/**\n\t * Set to `true` if the action is completed successfully.\n\t *\n\t * @memberof InlineLoading\n\t */\n\tprotected _success = false;\n}\n"]}