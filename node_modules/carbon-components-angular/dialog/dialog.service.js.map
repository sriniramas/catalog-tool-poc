{"version":3,"file":"dialog.service.js","sourceRoot":"","sources":["../src/dialog/dialog.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tEventEmitter,\n\tInjector,\n\tComponentRef,\n\tComponentFactory,\n\tComponentFactoryResolver,\n\tInjectable,\n\tViewContainerRef\n} from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\nimport { DialogConfig } from \"./dialog-config.interface\";\nimport { PlaceholderService } from \"./../placeholder/placeholder.module\";\n\n/**\n * `Dialog` object to be injected into other components.\n * @export\n * @class DialogService\n */\n@Injectable()\nexport class DialogService {\n\t/**\n\t * Used in `singletonClickListen`, don't count on its existence and values.\n\t */\n\tprotected static listeningForBodyClicks = false;\n\n\t/**\n\t * Reflects the open or closed state of the `Dialog`.\n\t * @memberof DialogService\n\t */\n\tpublic isOpen = false;\n\t/**\n\t * To be used to create the component using metadata.\n\t * @type {ComponentFactory<any>}\n\t * @memberof DialogService\n\t */\n\tpublic componentFactory: ComponentFactory<any>;\n\t/**\n\t * To emit the `Dialog` closing event.\n\t * @type {EventEmitter<any>}\n\t * @memberof DialogService\n\t */\n\tpublic onClose: EventEmitter<any> = new EventEmitter();\n\t/**\n\t * Holds reference to the created `Dialog` component after creation.\n\t * @type {ComponentRef<any>}\n\t * @memberof DialogService\n\t */\n\tpublic dialogRef: ComponentRef<any>;\n\n\t/**\n\t * Emits the state `true` if the Dialog is closed, false if `Dialog`\n\t * is opened/viewable.\n\t * @type {EventEmitter<any>}\n\t * @memberof DialogService\n\t */\n\tisClosed: EventEmitter<any> = new EventEmitter();\n\n\t/**\n\t * To watch the event that closes the `Dialog`.\n\t * @protected\n\t * @type {Subscription}\n\t * @memberof DialogService\n\t */\n\tprotected dialogSubscription: Subscription;\n\n\t/**\n\t * Creates an instance of `DialogService`.\n\t * @param {ComponentFactoryResolver} componentFactoryResolver\n\t * @param {Injector} injector\n\t * @memberof DialogService\n\t */\n\tconstructor(\n\t\tprotected componentFactoryResolver: ComponentFactoryResolver,\n\t\tprotected injector: Injector,\n\t\tprotected placeholderService: PlaceholderService\n\t) {}\n\n\t/**\n\t * Uses module `componentFactory` to create the `Dialog` component.\n\t * @param {any} component\n\t * @memberof DialogService\n\t */\n\tcreate(component) {\n\t\tthis.componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n\t}\n\n\t/**\n\t * Toggles between `Dialog` open/close states.\n\t * @param {ViewContainerRef} viewContainer\n\t * @param {DialogConfig} dialogConfig\n\t * @memberof DialogService\n\t */\n\ttoggle(viewContainer: ViewContainerRef, dialogConfig: DialogConfig) {\n\t\tif (this.isOpen) {\n\t\t\tthis.close(viewContainer);\n\t\t} else {\n\t\t\tthis.open(viewContainer, dialogConfig);\n\t\t}\n\t}\n\n\t/**\n\t * If `dialogRef` is defined, the Dialog is already open. If\n\t * `dialogRef` is undefined, we create the `Dialog` component and reference to it.\n\t * A subscription is created to track if the `Dialog` should close.\n\t * @param {ViewContainerRef} viewContainer\n\t * @param {DialogConfig} dialogConfig\n\t * @memberof DialogService\n\t */\n\topen(viewContainer: ViewContainerRef, dialogConfig: DialogConfig) {\n\t\tif (!this.dialogRef) {\n\t\t\tif (dialogConfig.appendInline) {\n\t\t\t\t// add our component to the view\n\t\t\t\tthis.dialogRef = viewContainer.createComponent(this.componentFactory, 0, this.injector);\n\t\t\t} else if (!this.placeholderService.hasPlaceholderRef()) {\n\t\t\t\tthis.dialogRef = viewContainer.createComponent(this.componentFactory, 0, this.injector);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\twindow.document.querySelector(\"body\").appendChild(this.dialogRef.location.nativeElement);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.dialogRef = this.placeholderService.createComponent(this.componentFactory, this.injector);\n\t\t\t}\n\n\t\t\t// initialize some extra options\n\t\t\tlet focusedElement = document.activeElement;\n\t\t\tdialogConfig[\"previouslyFocusedElement\"] = focusedElement;\n\t\t\tthis.dialogRef.instance.dialogConfig = dialogConfig;\n\t\t\tthis.onClose = this.dialogRef.instance.close;\n\t\t\tthis.isOpen = true;\n\n\t\t\tthis.dialogSubscription = this.onClose.subscribe(() => {\n\t\t\t\tthis.close(viewContainer);\n\t\t\t});\n\n\t\t\tthis.dialogRef.instance.elementRef.nativeElement.focus();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * On close of `Dialog` item, sets focus back to previous item, unsets\n\t * the current `dialogRef` item. Unsubscribes to the event of `Dialog` close.\n\t * @param {ViewContainerRef} viewContainer\n\t * @param {any} [evt]\n\t * @memberof DialogService\n\t */\n\tclose(viewContainer: ViewContainerRef) {\n\t\tthis.isClosed.emit(true);\n\n\t\tif (this.dialogRef) {\n\t\t\tlet elementToFocus = this.dialogRef.instance.dialogConfig[\"previouslyFocusedElement\"];\n\t\t\tif (this.placeholderService.hasPlaceholderRef() && !this.dialogRef.instance.dialogConfig.appendInline) {\n\t\t\t\tthis.placeholderService.destroyComponent(this.dialogRef);\n\t\t\t} else {\n\t\t\t\tviewContainer.remove(viewContainer.indexOf(this.dialogRef.hostView));\n\t\t\t}\n\t\t\tthis.dialogRef = null;\n\t\t\tthis.isOpen = false;\n\t\t\telementToFocus.focus();\n\n\t\t\tif (this.dialogSubscription) {\n\t\t\t\tthis.dialogSubscription.unsubscribe();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fix for safari hijacking clicks.\n\t *\n\t * Runs on `ngOnInit` of every dialog. Ensures we don't have multiple listeners\n\t * because having many of them could degrade performance in certain cases (and is\n\t * not necessary for our use case)\n\t *\n\t * This is an internally used function, can change at any point (even get removed)\n\t * and changes to it won't be considered a breaking change. Use at your own risk.\n\t */\n\tsingletonClickListen() {\n\t\tif (!DialogService.listeningForBodyClicks) {\n\t\t\tdocument.body.firstElementChild.addEventListener(\"click\", () => null, true);\n\t\t\tDialogService.listeningForBodyClicks = true;\n\t\t}\n\t}\n}\n"]}