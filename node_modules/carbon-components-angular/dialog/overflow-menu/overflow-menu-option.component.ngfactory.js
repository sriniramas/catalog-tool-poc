/*!
 *
 * carbon-angular v0.0.0 | overflow-menu-option.component.ngfactory.js
 *
 * Copyright 2014, 2018 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "./overflow-menu-option.component";
var styles_OverflowMenuOption = [];
var RenderType_OverflowMenuOption = i0.ɵcrt({ encapsulation: 2, styles: styles_OverflowMenuOption, data: {} });
export { RenderType_OverflowMenuOption as RenderType_OverflowMenuOption };
export function View_OverflowMenuOption_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, "button", [["class", "bx--overflow-menu-options__btn"], ["role", "menuitem"]], [[8, "tabIndex", 0], [8, "disabled", 0], [8, "title", 0]], [[null, "focus"], [null, "blur"], [null, "click"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if (("focus" === en)) {
        var pd_0 = ((_co.tabIndex = 0) !== false);
        ad = (pd_0 && ad);
    } if (("blur" === en)) {
        var pd_1 = ((_co.tabIndex = (0 - 1)) !== false);
        ad = (pd_1 && ad);
    } if (("click" === en)) {
        var pd_2 = (_co.onClick($event) !== false);
        ad = (pd_2 && ad);
    } return ad; }, null, null)), i0.ɵncd(null, 0)], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.tabIndex; var currVal_1 = _co.disabled; var currVal_2 = (_co.titleEnabled ? _co.content : ""); _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2); }); }
export function View_OverflowMenuOption_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, "ibm-overflow-menu-option", [], [[8, "className", 0], [1, "role", 0], [2, "bx--overflow-menu-options__option--danger", null], [2, "bx--overflow-menu-options__option--disabled", null]], null, null, View_OverflowMenuOption_0, RenderType_OverflowMenuOption)), i0.ɵdid(1, 49152, null, 0, i1.OverflowMenuOption, [i0.ElementRef], null, null)], null, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 1).optionClass; var currVal_1 = i0.ɵnov(_v, 1).role; var currVal_2 = i0.ɵnov(_v, 1).isDanger; var currVal_3 = i0.ɵnov(_v, 1).isDisabled; _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3); }); }
var OverflowMenuOptionNgFactory = i0.ɵccf("ibm-overflow-menu-option", i1.OverflowMenuOption, View_OverflowMenuOption_Host_0, { type: "type", disabled: "disabled" }, { selected: "selected" }, ["*"]);
export { OverflowMenuOptionNgFactory as OverflowMenuOptionNgFactory };
//# sourceMappingURL=overflow-menu-option.component.ngfactory.js.map