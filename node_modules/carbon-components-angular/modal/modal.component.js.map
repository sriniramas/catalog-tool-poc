{"version":3,"file":"modal.component.js","sourceRoot":"","sources":["../src/modal/modal.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { ModalService } from \"./modal.service\";\nimport {\n\tAfterViewInit,\n\tComponent,\n\tEventEmitter,\n\tHostListener,\n\tInput,\n\tOnDestroy,\n\tOnInit,\n\tOutput,\n\tElementRef,\n\tViewChild\n} from \"@angular/core\";\nimport {\n\ttrigger,\n\tstate,\n\tstyle,\n\ttransition,\n\tanimate\n} from \"@angular/animations\";\nimport { cycleTabs, getFocusElementList } from \"./../common/tab.service\";\n\n\n/**\n * Component to create modals for presenting content.\n *\n * Using a modal in your application requires `ibm-modal-placeholder` which would generally be\n * placed near the end of your app component template (app.component.ts or app.component.html) as:\n *\n * ```html\n * <ibm-modal-placeholder></ibm-modal-placeholder>\n * ```\n *\n * A more complete example for `Modal` is given as follows:\n *\n * Example modal definition:\n *\n * ```typescript\n * \\@Modal()\n * \\@Component({\n * \tselector: \"app-sample-modal\",\n * \ttemplate: `\n *\t\t<ibm-modal size=\"xl\">\n * \t\t\t<ibm-modal-header (closeSelect)=\"closeModal()\">Header text</ibm-modal-header>\n * \t\t\t<section class=\"modal-body\">\n * \t\t\t<h1>Sample modal works.</h1>\n * \t\t\t<button class=\"btn--icon-link\" nPopover=\"Hello there\" title=\"Popover title\" placement=\"right\" appendInline=\"true\">\n * \t\t\t\t<ibm-icon icon=\"info\" size=\"sm\"></ibm-icon>\n * \t\t\t</button>\n * \t\t\t{{modalText}}\n * \t\t\t</section>\n * \t\t\t<ibm-modal-footer><button ibmButton=\"primary\" (click)=\"closeModal()\">Close</button></ibm-modal-footer>\n * \t\t</ibm-modal>`,\n * \tstyles: [``]\n * })\n * export class SampleModal {\n * \tcloseModal: any; // placeholder for the closeModal method provided by the Modal decorator\n * \tmodalText: string;\n * \tconstructor(protected injector: Injector) {\n * \t\tthis.modalText = this.injector.get(\"modalText\");\n * \t}\n * }\n * ```\n *\n * Example of opening the modal:\n *\n * ```typescript\n * \\@Component({\n *  selector: \"app-modal-demo\",\n *  template: `\n *   <button ibmButton=\"primary\" (click)=\"openModal('drill')\">Drill-down modal</button>\n *   <ibm-modal-placeholder></ibm-modal-placeholder>`\n * })\n * export class ModalDemo {\n * \topenModal() {\n * \t\tthis.modalService.create({component: SampleModal, inputs: {modalText: \"Hello universe.\"}});\n * \t}\n * }\n * ```\n *\n */\n@Component({\n\tselector: \"ibm-modal\",\n\ttemplate: `\n\t\t<ibm-overlay [theme]=\"theme\" (overlaySelect)=\"overlaySelected.emit()\">\n\t\t\t<div\n\t\t\t\tclass=\"bx--modal-container\"\n\t\t\t\t[@modalState]=\"modalState\"\n\t\t\t\trole=\"dialog\"\n\t\t\t\taria-modal=\"true\"\n\t\t\t\ttabindex=\"0\"\n\t\t\t\tstyle=\"z-index:1;\"\n\t\t\t\t[attr.aria-label]=\"modalLabel\"\n\t\t\t\t#modal>\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</ibm-overlay>\n\t`,\n\tanimations: [\n\t\ttrigger(\"modalState\", [\n\t\t\tstate(\"void\", style({transform: \"translate(0, 5%)\", opacity: 0})),\n\t\t\ttransition(\":enter\", [\n\t\t\t\tanimate(\"200ms ease-in\")\n\t\t\t]),\n\t\t\ttransition(\":leave\", [\n\t\t\t\tanimate(200, style({transform: \"translate(0, 5%)\", opacity: 0}))\n\t\t\t])\n\t\t])\n\t]\n})\nexport class Modal implements AfterViewInit, OnInit, OnDestroy {\n\t/**\n\t * Size of the modal to display.\n\t */\n\t@Input() size: \"sm\" | \"md\" | \"lg\" | \"xl\" | \"xxl\" = \"md\";\n\t/**\n\t * Classification of the modal.\n\t */\n\t@Input() theme: \"default\" | \"danger\" = \"default\";\n\n\t/**\n\t * Label for the modal.\n\t */\n\t@Input() modalLabel = \"default\";\n\n\t/**\n\t * Emits event when click occurs within `n-overlay` element. This is to track click events occuring outside bounds of the `Modal` object.\n\t */\n\t@Output() overlaySelected = new EventEmitter();\n\t/**\n\t * To emit the closing event of the modal window.\n\t */\n\t@Output() close = new EventEmitter();\n\t/**\n\t * Maintains a reference to the view DOM element of the `Modal`.\n\t */\n\t@ViewChild(\"modal\") modal: ElementRef;\n\n\t/**\n\t * Controls the transitions of the `Modal` component.\n\t */\n\tmodalState: \"in\" | \"out\" = \"out\";\n\n\t/**\n\t * An element should have 'data-modal-primary-focus' as an attribute to receive initial focus within the `Modal` component.\n\t */\n\tselectorPrimaryFocus = \"[modal-primary-focus]\";\n\n\t/**\n\t * Creates an instance of `Modal`.\n\t */\n\tconstructor(public modalService: ModalService) {}\n\n\t/**\n\t * Set modalState on the modal component when it is initialized.\n\t */\n\tngOnInit() {\n\t\tthis.modalState = \"in\";\n\t}\n\n\t/**\n\t * Set document focus to be on the modal component after it is initialized.\n\t */\n\tngAfterViewInit() {\n\t\tconst primaryFocusElement = this.modal.nativeElement.querySelector(this.selectorPrimaryFocus);\n\t\tif (primaryFocusElement && primaryFocusElement.focus) {\n\t\t\tprimaryFocusElement.focus();\n\t\t\treturn;\n\t\t}\n\t\tif (getFocusElementList(this.modal.nativeElement).length > 0) {\n\t\t\tgetFocusElementList(this.modal.nativeElement)[0].focus();\n\t\t} else {\n\t\t\tthis.modal.nativeElement.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Emit the close event when the modal component is destroyed.\n\t */\n\tngOnDestroy() {\n\t\tthis.modalState = \"out\";\n\t}\n\n\t/**\n\t * Handle keyboard events to close modal and tab through the content within the modal.\n\t */\n\t@HostListener(\"keydown\", [\"$event\"])\n\thandleKeyboardEvent(event: KeyboardEvent) {\n\t\tswitch (event.key) {\n\t\t\tcase \"Escape\": {\n\t\t\t\tevent.stopImmediatePropagation();  // prevents events being fired for multiple modals if more than 2 open\n\t\t\t\tthis.modalService.destroy();  // destroy top (latest) modal\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase \"Tab\": {\n\t\t\t\tcycleTabs(event, this.modal.nativeElement);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}