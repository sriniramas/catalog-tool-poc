{"version":3,"file":"sprite.component.js","sourceRoot":"","sources":["../src/icon/sprite.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACN,SAAS,EACT,KAAK,EACL,UAAU,EAEV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACrC,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAE7C;;;GAGG;AACH;IAgBC;;;;;;OAMG;IACH,gBAAsB,IAAU,EACrB,WAAuB,EACvB,KAAkB;QAFP,SAAI,GAAJ,IAAI,CAAM;QACrB,gBAAW,GAAX,WAAW,CAAY;QACvB,UAAK,GAAL,KAAK,CAAa;QAZ7B,mDAAmD;QAC1C,WAAM,GAAG,EAAE,CAAC;IAWW,CAAC;IAEjC,0DAA0D;IAC1D,gCAAe,GAAf;QAAA,iBASC;QARA,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,UAAA,MAAM;YACjD,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,GAAG,MAAM,CAAC;YAClD,4EAA4E;YAC5E,4DAA4D;YAC5D,UAAU,CAAC;gBACV,WAAW,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YACjC,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;;gBArCD,SAAS,SAAC;oBACV,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,EAAE;oBACZ,MAAM,EAAE,CAAC,mFAMR,CAAC;oBACF,SAAS,EAAE,CAAC,WAAW,CAAC;iBACxB;;;;gBAlBQ,IAAI;gBAHZ,UAAU;gBAIF,WAAW;;;yBAoBlB,KAAK;;IAwBP,aAAC;CAAA,AAtCD,IAsCC;SA1BY,MAAM","sourcesContent":["import {\n\tComponent,\n\tInput,\n\tElementRef,\n\tAfterViewInit\n} from \"@angular/core\";\nimport { Http } from \"@angular/http\";\nimport { IconService } from \"./icon.service\";\n\n/**\n * Used to load sprites and is generally used at the root of the application.\n * Page specific sprites may be loaded on that page, but do note that may result in unintened network requets.\n */\n@Component({\n\tselector: \"ibm-sprite\",\n\ttemplate: ``,\n\tstyles: [`\n\t\t:host {\n\t\t\tdisplay: none;\n\t\t\theight: 0;\n\t\t\twidth: 0;\n\t\t}\n\t`],\n\tproviders: [IconService]\n})\nexport class Sprite implements AfterViewInit {\n\t/** name used to request sprite from the baseURL */\n\t@Input() sprite = \"\";\n\n\t/**\n\t * instantiate the component and instances of http and iconService\n\t *\n\t * @param {Http} http\n\t * @param {ElementRef} _elementRef\n\t * @param {IconService} icons\n\t */\n\tconstructor(protected http: Http,\n\t\tprotected _elementRef: ElementRef,\n\t\tprotected icons: IconService) {}\n\n\t/** load the sprite and inject it into the rendered DOM */\n\tngAfterViewInit() {\n\t\tthis.icons.getSprite(this.sprite).subscribe(rawSVG => {\n\t\t\tthis._elementRef.nativeElement.innerHTML = rawSVG;\n\t\t\t// insure the DOM has settled before we tell everyone they can request icons\n\t\t\t// TODO: move all the sprites into in memory data structures\n\t\t\tsetTimeout(() => {\n\t\t\t\tIconService.spriteLoaded.emit();\n\t\t\t});\n\t\t});\n\t}\n}\n"]}