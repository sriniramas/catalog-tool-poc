{"version":3,"file":"icon.service.js","sourceRoot":"","sources":["../src/icon/icon.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable, throwError } from \"rxjs\";\nimport { tap, catchError } from \"rxjs/operators\";\nimport { IconSize } from \"./icon.types\";\n\n/**\n * Service that provides static methods for globally configuring icon requests,\n * and instance methods for requesting sprites and converting sizes to pixel values\n */\n@Injectable()\nexport class IconService {\n\tstatic spriteLoaded = new EventEmitter();\n\t/**\n\t * Internal variable to track running requests.\n\t * Used to call spriteLoaded when new sprites are available\n\t */\n\tprotected static runningRequests = 0;\n\t/**\n\t * map to use for sprite requests\n\t *\n\t * we just cache the whole promise since we can always `.then` out the result\n\t * */\n\tprotected static spriteCache: Map<string, Observable<string>> = new Map<string, Observable<string>>();\n\t/** how aggressively to cache sprites. defaults to simple */\n\tprotected static cacheLevel: \"none\" | \"simple\" = \"simple\";\n\t/** URL to request sprites from */\n\tprotected static baseURL = \"https://peretz-icons.mybluemix.net/\";\n\n\t/**\n\t * Sets the baseURL\n\t *\n\t * By default we use http://peretz-icons.mybluemix.net/ for sprites - this is sufficient for prototyping,\n\t * but for development and production it is recommended to build streamlined sprites and host them statically.\n\t *\n\t * @param {string} url\n\t */\n\tstatic setBaseURL(url: string) {\n\t\tIconService.baseURL = url;\n\t\treturn IconService;\n\t}\n\n\t/**\n\t * sets the caching level for sprites.\n\t * \"none\" disables caching (sprites will always be requested again)\n\t * \"simple\" uses a static Map as a naive cache\n\t *\n\t * @param {\"none\" | \"simple\"} level\n\t */\n\tstatic setCacheLevel(level: \"none\" | \"simple\") {\n\t\tIconService.cacheLevel = level;\n\t\treturn IconService;\n\t}\n\n\t/** get an instance of the Http service */\n\tconstructor(protected http: HttpClient) {}\n\n\t/**\n\t * Responsible for fetching sprites from the `baseURL`\n\t *\n\t * @param {string} name name of the sprite to request\n\t */\n\tdoSpriteRequest(name: string): Observable<string> {\n\t\tIconService.runningRequests++;\n\t\treturn this.http.get(`${IconService.baseURL}${name}.svg`, { responseType: \"text\" })\n\t\t\t.pipe(\n\t\t\t\ttap(() => IconService.runningRequests--),\n\t\t\t\tcatchError(() => {\n\t\t\t\t\tconst error = `failed to load sprite ${name}, check that the server is available and baseURL is correct`;\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t\treturn throwError(error);\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\t/**\n\t * Returns a promise that will resolve to a clone of the requested icon\n\t *\n\t * @param name name of the icon\n\t * @param size size of the icon as an IconSize\n\t */\n\tgetIcon(name: string, size: IconSize): Promise<HTMLElement> {\n\t\t// resolver either calls the provided Promise resolution function with the loaded icon\n\t\t// or returns false to indicate the sprite with the required icon has yet to load\n\t\tconst resolver = resolve => {\n\t\t\tconst icon = document.querySelector(`symbol#${name}_${size}`);\n\t\t\tif (icon) {\n\t\t\t\tconst clone = icon.firstElementChild.cloneNode(true);\n\t\t\t\treturn resolve(clone as HTMLElement);\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tconst loadedIcon = new Promise<HTMLElement>((resolve, reject) => {\n\t\t\tif (!resolver(resolve)) {\n\t\t\t\tIconService.spriteLoaded.subscribe(() => {\n\t\t\t\t\tresolver(resolve);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\treturn loadedIcon;\n\t}\n\n\t/**\n\t * Requests and caches the specified sprite\n\t *\n\t * @param {string} name name of the sprite to request\n\t */\n\tgetSprite(name: string): Observable<string> {\n\t\tif (IconService.cacheLevel === \"none\") {\n\t\t\treturn this.doSpriteRequest(name);\n\t\t} else {\n\t\t\tif (IconService.spriteCache.has(name)) {\n\t\t\t\treturn IconService.spriteCache.get(name);\n\t\t\t}\n\t\t\tlet spriteRequest = this.doSpriteRequest(name);\n\t\t\tIconService.spriteCache.set(name, spriteRequest);\n\t\t\treturn spriteRequest;\n\t\t}\n\t}\n}\n"]}