{"version":3,"file":"abstract-dropdown-view.class.js","sourceRoot":"","sources":["../src/dropdown/abstract-dropdown-view.class.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAI5D;;;;;;;GAOG;AACH;IAAA;QAaC;;;WAGG;QACI,SAAI,GAAuB,QAAQ,CAAC;QAC3C;;WAEG;QACI,SAAI,GAAuB,IAAI,CAAC;IAuCxC,CAAC;IAtCA;;OAEG;IACH,0CAAW,GAAX,cAA0B,OAAO,CAAC,CAAC;IACnC;;OAEG;IACH,6CAAc,GAAd,cAAgC,OAAO,CAAC,CAAC;IACzC;;OAEG;IACH,0CAAW,GAAX,cAA0B,OAAO,CAAC,CAAC;IACnC;;OAEG;IACH,6CAAc,GAAd,cAAgC,OAAO,CAAC,CAAC;IACzC;;OAEG;IACH,0CAAW,GAAX,cAA4B,OAAO,CAAC,CAAC;IACrC;;OAEG;IACH,6CAAc,GAAd,cAA6B,OAAO,CAAC,CAAC;IACtC;;OAEG;IACH,gDAAiB,GAAjB,cAAmC,OAAO,CAAC,CAAC;IAC5C;;OAEG;IACH,gDAAiB,GAAjB,UAAkB,KAAsB,IAAS,CAAC;IAElD;;;OAGG;IACH,wCAAS,GAAT,cAAmB,CAAC;;wBArDnB,KAAK;yBAML,MAAM;;IAgDR,2BAAC;CAAA,AA5DD,IA4DC;SA5DY,oBAAoB","sourcesContent":["import { Input, Output, EventEmitter } from \"@angular/core\";\nimport { ListItem } from \"./list-item.interface\";\n\n\n/**\n * A component that intends to be used within `Dropdown` must provide an implementation that extends this base class.\n * It also must provide the base class in the `@Component` meta-data.\n * ex: `providers: [{provide: AbstractDropdownView, useExisting: forwardRef(() => MyDropdownView)}]`\n *\n * @export\n * @class AbstractDropdownView\n */\nexport class AbstractDropdownView {\n\t/**\n\t * The items to be displayed in the list within the `AbstractDropDownView`.\n\t * @type {Array<ListItem>}\n\t * @memberof AbstractDropdownView\n\t */\n\t@Input() items: Array<ListItem>;\n\t/**\n\t * Emits selection events to other class.\n\t * @type {EventEmitter<Object>}\n\t * @memberof AbstractDropdownView\n\t */\n\t@Output() select: EventEmitter<Object>;\n\t/**\n\t * Specifies whether or not the `DropdownList` supports selecting multiple items as opposed to single\n\t * item selection.\n\t */\n\tpublic type: \"single\" | \"multi\" = \"single\";\n\t/**\n\t * Specifies the render size of the items within the `AbstractDropdownView`.\n\t */\n\tpublic size: \"sm\" | \"md\" | \"lg\" = \"md\";\n\t/**\n\t * Returns the `ListItem` that is subsequent to the selected item in the `DropdownList`.\n\t */\n\tgetNextItem(): ListItem { return; }\n\t/**\n\t * Returns the `HTMLElement` for the item that is subsequent to the selected item.\n\t */\n\tgetNextElement(): HTMLElement { return; }\n\t/**\n\t * Returns the `ListItem` that precedes the selected item within `DropdownList`.\n\t */\n\tgetPrevItem(): ListItem { return; }\n\t/**\n\t * Returns the `HTMLElement` for the item that precedes the selected item.\n\t */\n\tgetPrevElement(): HTMLElement { return; }\n\t/**\n\t * Returns the selected leaf level item(s) within the `DropdownList`.\n\t */\n\tgetSelected(): ListItem[] { return; }\n\t/**\n\t * Returns the `ListItem` that is selected within `DropdownList`.\n\t */\n\tgetCurrentItem(): ListItem { return; }\n\t/**\n\t * Returns the `HTMLElement` for the item that is selected within the `DropdownList`.\n\t */\n\tgetCurrentElement(): HTMLElement { return; }\n\t/**\n\t * Transforms array input list of items to the correct state by updating the selected item(s).\n\t */\n\tpropagateSelected(value: Array<ListItem>): void {}\n\n\t/**\n\t * Initalizes focus in the list\n\t * In most cases this just calls `getCurrentElement().focus()`\n\t */\n\tinitFocus(): void {}\n}\n"]}